name: workflow-build-app

on:
  push:
    branches:
      - dev
    paths:
      - 'find_api/**'
      - 'docker/**'
env:
  ENVIRONMENT: "develop"
  ECR_REGISTRY_URI: "658299583140.dkr.ecr.us-east-1.amazonaws.com/ecr_develop"
  ECS_CLUSTER_NAME: "cluster_develop"
  ECS_SERVICE_NAME: "task_def_develop"
  
jobs:
   set-up-terraform-backend:
    runs-on: ubuntu-latest
        
    steps:
      - name: Checkout
        uses: actions/checkout@v2
              
      - name: Configure AWS Credentials
        id: config_aws_creds
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1 
      
      - name: terraform-backend-set-up
        uses: ./.github/actions/terraform-backend    

      - name: Authenticate with AWS ECR
        run: |
         aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 658299583140.dkr.ecr.us-east-1.amazonaws.com 
      
      # utiliza la imagen de hadolint para verificar la calidad del Dockerfile
      - name: Docker lint
        run: |
         docker run --rm -i hadolint/hadolint < ./docker/Dockerfile
    
      - name: Build Docker Image
        id: build-image
        run: |
           docker build -t ${{ env.ECR_REGISTRY_URI }}:${{ github.sha }} ./find_api
       
      - name: Docker tag
        run: |
           docker tag ${{ env.ECR_REGISTRY_URI }}:${{ github.sha }}:latest
                 
      - name: Push to AWS ECR
        run: |
           docker push ${{ env.ECR_REGISTRY_URI }}:${{ github.sha }}

      - name: Update ECS Service
        run: |
            aws ecs update-service --cluster ${{ env.ECS_CLUSTER_NAME }} --service ${{ env.ECS_SERVICE_NAME }} --task-definition ${{ env.ECR_REGISTRY_URI }}:${{ github.sha }}
             
      - name: Validate ECS Task Definition
        run: |
           task_definition=$(aws ecs describe-services --cluster ${{ env.ECS_CLUSTER_NAME }} --services ${{ env.ECS_SERVICE_NAME }} --query 'services[0].taskDefinition' --output text)
           image_from_task_definition=$(aws ecs describe-task-definition --task-definition $task_definition --query 'taskDefinition.containerDefinitions[0].image' --output text)
           if [ "$image_from_task_definition" != "$ECR_REGISTRY_URI:${{ github.sha }}" ]; then
              echo "Task Definition is not using the expected image."
               exit 1
           fi
           echo "Task Definition is using the expected image."    
          
